#!/bin/bash

root_dir="$(dirname "$0")"
version="$(cat VERSION)"
assets_dir=assets
fonts_dir=$assets_dir/fonts
prefix=/usr
arch="$(uname -m)"
trigger="custom"
ext=
sdl_libs=
build_id="unknown"
archive_name="libevelengine"
skip_deps=0
conan_path=


showhelp() 
{
cat << HELPMSG
usage: configure [options]
Configure evelengine build 

Options:
  --help
    Display this help message

  --trigger=<trigger>
    Specify trigger of the build. "custom" is default

  --build-id=<build-id>
    Specify ID of the build

  --skip-deps
    Skips dependencies download via conan

  --conan=<path-to-conan>
    Specify path to conan binary

HELPMSG
}

while [ $# -ge 1 ]; do
	case "$1" in

	--trigger=*)
		trigger="`echo ${1} | awk '{print substr($0,11)}'`" ;;

    --build-id=*)
		build_id="`echo ${1} | awk '{print substr($0,12)}'`" ;;

    --skip-deps)
        skip_deps=1 ;;

    --conan=*)
        conan_path="`echo ${1} | awk '{print substr($0,9)}'`" ;;

    --help)
 		showhelp
 		exit 0
		;;

	*)
		showhelp
		exit 1
		;;

    esac

    shift
done

if [ $skip_deps -eq 1 ]; then
    echo "Skipping dependencies download"
else
    if [ "$conan_path" != "" ]; then
        echo "Specified path to conan: ${conan_path}"
    else
        conan_path=`which conan`
    fi

    if [ $? -ne 0 ]; then
        echo "Conan not found"
        conan_path=
    else
        echo "Found conan... $conan_path"
    fi

    if [ "$conan_path" != "" ]; then
        echo "Downloading dependencies specified in .conanfile"

        conan install ./.conanfile --build fmt --build gtest --build jsoncpp --build spdlog --build yaml-cpp --build bzip2 --build expat --build openssl --build sqlite3 --build zlib --build pcre --build poco -s compiler.libcxx=libstdc++11 > /tmp/conan-install.log
    fi
fi

if [ "$trigger" == "cron" ]; then
    trigger="nightly"
elif [ "$trigger" == "push" ]; then
    trigger="latest"
elif [ "$trigger" == "pull_request" ]; then
    trigger="test"
fi

if [ `uname -s` == "Darwin" ]; then
    echo "Configured for Darwin"
    ext=dylib
    sdl_libs="-lsdl2 -lsdl2_image -lsdl2_ttf"
elif [ `uname -s` == "Linux" ]; then
    echo "Configured for Linux"
    ext=so
    sdl_libs="-lSDL2 -lSDL2_image -lSDL2_ttf"
else
    echo "Unsupported platform"
    exit 112
fi

# Import Generate items generated by conan
echo "Checking Conanfile"
if [ ! -e "./conanbuildinfo.mak" ]; then
    echo "Missing conanbuildinfo.mak. Did you forget to run `conan install ./.conanfile`?"
fi


echo "# Examples file generated by configure script" > make.examples
echo "" >> make.examples
# Find all examples
examples_list=
clean_list=
mrproper_list=
example_rules=
for file in `ls examples`; do
    if [ -d "examples/$file" -a -f "examples/$file/Makefile" ]; then
        examples_list="$examples_list $file"
        clean_list="$clean_list $file-clean"
        mrproper_list="$mrproper_list $file-mrproper"
        echo "$file:" >> make.examples
        echo -e "\t\$(MAKE) -C ./examples/$file $file" >> make.examples
        # Putting clean target
        echo "" >> make.examples
        echo "$file-clean:" >> make.examples
        echo -e "\t\$(MAKE) -C ./examples/$file clean" >> make.examples
        # Putting mrproper target
        echo "" >> make.examples
        echo "$file-mrproper:" >> make.examples
        echo -e "\t\$(MAKE) -C ./examples/$file mrproper" >> make.examples
    fi
done

echo "Download PerlinNoise.hpp from github.com/Reputeless/PerlinNoise"
wget https://raw.githubusercontent.com/Reputeless/PerlinNoise/master/PerlinNoise.hpp -o include/PerlinNoise.hpp

archive_name="${archive_name}-${trigger}-${version}"

if [ "$build_id" != "unknown" ]; then
    archive_name="${archive_name}-${build_id}"
fi

archive_name="${archive_name}-${arch}.tar.gz"


echo "" >> make.examples
echo "examples:$examples_list" >> make.examples
echo "" >> make.examples
echo "examples-clean:$clean_list" >> make.examples
echo "" >> make.examples
echo "examples-mrproper:$mrproper_list" >> make.examples

echo $example_rules
echo $archive_name

output_file=make.config

echo "# ${output_file} generate by configure script" > $output_file
echo "EXAMPLES=$examples_list" >> $output_file
echo "EXT=${ext}" >> $output_file
echo "SDL_LIBS=${sdl_libs}" >> $output_file
echo "PREFIX=${prefix}" >> $output_file
echo "ARCH_NAME=${arch}" >> $output_file
echo "BUILD_TRIGGER=${trigger}" >> $output_file
echo "VERSION_NUMBER=${version}" >> $output_file
echo "BUILD_ID=${build_id}" >> $output_file
echo "ARCHIVE=${archive_name}" >> $output_file

echo "export EXAMPLES" >> $output_file
echo "export EXT" >> $output_file
echo "export SDL_LIBS" >> $output_file
echo "export PREFIX" >> $output_file
echo "export ARCH_NAME" >> $output_file
echo "export BUILD_TRIGGER" >> $output_file
echo "export VERSION_NUMBER" >> $output_file
echo "export BUILD_ID" >> $output_file
echo "export ARCHIVE" >> $output_file
